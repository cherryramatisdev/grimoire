# frozen_string_literal: true

require 'rubygems'

ActiveRecord::Base.logger.level = 1 if defined?(ActiveRecord)
IRB.conf[:SAVE_HISTORY] = 1000

def recompile(print: true)
  return reload! if defined?(Rails)

  puts 'Reloading ...' if print
  # Main project directory.
  root_dir = Dir.pwd
  # Directories within the project that should be reloaded.
  reload_dirs = %w[lib app]
  # Loop through and reload every file in all relevant project directories.
  reload_dirs.each do |dir|
    Dir.glob("#{root_dir}/#{dir}/**/*.rb").each { |f| load(f) }
  end
  # Return true when complete.
  true
end

# Overriding Object class
class Object
  # Easily print methods local to an object's class
  def lm
    (methods - Object.instance_methods).sort
  end

  # look up source location of a method
  def sl(method_name)
    method(method_name).source_location
  rescue StandardError
    "#{method_name} not found"
  end

  # open particular method in vim
  def o(method_name)
    file, line = sl(method_name)
    if file && line
      system("#{ENV.fetch('EDITOR', 'vim')} '#{file}' +#{line}")
    else
      "'#{method_name}' not found :(Try #{name}.lm to see available methods"
    end
  end

  # display method source in rails console
  def ds(method_name)
    method(method_name).source.display
  end

  # open json object in vim
  def oo
    tempfile = File.join(Rails.root.join('tmp'), SecureRandom.hex)
    File.open(tempfile, 'w') { |f| f << as_json }
    system("#{ENV.fetch('EDITOR', 'vim')} #{tempfile}")
    sleep(1)
    File.delete(tempfile)
  end
end

# history command
def hist(count = 0)
  # Get history into an array
  history_array = Readline::HISTORY.to_a

  # if count is > 0 we'll use it.
  # otherwise set it to 0
  count = count > 0 ? count : 0

  if count > 0
    from = history_array.length - count
    history_array = history_array[from..-1]
  end

  print history_array.join("\n")
end

# copy a string to the clipboard
def cp(string)
  `echo "#{string}" | pbcopy`
  puts 'copied in clipboard'
end

# opens irbrc in vim
def edit_irb
  editor = ENV.fetch('EDITOR', 'vim')
  `#{editor} ~/.irbrc`
end

def bm
  # From http://blog.evanweaver.com/articles/2006/12/13/benchmark/
  # Call benchmark { } with any block and you get the wallclock runtime
  # as well as a percent change + or - from the last run
  cur = Time.now
  result = yield
  print "#{cur = Time.now - cur} seconds"
  begin
    puts " (#{(cur / $last_benchmark * 100).to_i - 100}% change)"
  rescue StandardError
    puts ''
  end
  $last_benchmark = cur
  result
end

alias e exit
